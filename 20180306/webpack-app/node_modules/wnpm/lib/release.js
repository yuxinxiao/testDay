'use strict';

let getNpmConfig = (() => {
  var _ref = _asyncToGenerator(function* () {
    const configPath = yield execa.stdout('npm', ['get', 'userconfig']);

    return new Promise(function (resolve, reject) {
      fs.readFile(configPath, 'utf-8', function (err, content) {
        if (err) {
          reject(err);
        } else {
          resolve(ini.parse(content));
        }
      });
    });
  });

  return function getNpmConfig() {
    return _ref.apply(this, arguments);
  };
})();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const url = require('url');
const path = require('path');
const got = require('got');
const fs = require('fs');
const ini = require('ini');
const execa = require('execa');

module.exports = (() => {
  var _ref2 = _asyncToGenerator(function* (args, registry) {
    const module = args[1] || '';
    const regex = /^(@[^/]+[/][^/]+)@([\d]+\.[\d]+\.[\d]+)$/;
    const match = module.match(regex);

    if (!match) {
      console.log('Invalid release syntax');
      console.log('Example: wnpm release @wac/my-module@1.0.0');
      return process.exit(1);
    }

    let [pkgName, version] = match.slice(1);

    const npmConfig = yield getNpmConfig();
    const token = npmConfig['//npm.caimi-inc.com/:_authToken'];

    if (!token) {
      console.log('Users are not login');
      console.log('Please run: wnpm login');
      return process.exit(1);
    }
    pkgName = encodeURIComponent(pkgName).replace('%40', '@');

    const releasePath = path.join('/-/release', pkgName, version);
    const releaseUrl = url.resolve(registry, releasePath);

    return got.post(releaseUrl, {
      json: true,
      headers: {
        authorization: `Bearer ${token}`
      }
    }).then(function () {
      console.log(`+ ${module} released`);
    }).catch(function (err) {
      const ret = err.response.body;
      console.log(`ERR! ${ret.error || err.message}`);
      console.log(`ERR! ${module} release failed`);
      process.exit(1);
    });
  });

  return function (_x, _x2) {
    return _ref2.apply(this, arguments);
  };
})();