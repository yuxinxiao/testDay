'use strict';

const open = require('opn');
const which = require('which');
const execa = require('execa');
const updateNotifier = require('update-notifier');
const binaryMirrors = require('binary-mirror-config');

const pkg = require('../package.json');
const distUrl = 'https://npm.taobao.org/mirrors/node/';

module.exports = ({ registry }) => {
  // check update
  process.env.npm_registry = registry;

  updateNotifier({
    pkg: pkg,
    updateCheckInterval: 1000 * 60 * 60
  }).notify();

  const args = process.argv.slice(2);

  switch (args[0]) {
    // output versions info
    case '-v':
    case '--version':
      {
        const nodeVersion = process.versions.node;
        const npmVersion = execa.shellSync('npm -v').stdout;
        const prefix = execa.shellSync('npm prefix -g').stdout;

        console.log(JSON.stringify({
          wnpm: pkg.version,
          npm: npmVersion,
          node: nodeVersion,
          prefix: prefix,
          registry: registry
        }, null, 2));
        return process.exit(0);
      }
    // open registry
    case 'web':
      {
        open(registry);
        return process.exit(0);
      }
    // open readme
    case 'doc':
      {
        open(registry + (args[1] || ''));
        return process.exit(0);
      }
    // release module
    case 'release':
      {
        return require('./release')(args, registry);
      }
    // before publish
    case 'pub':
    case 'publish':
      {
        require('./publish')();
      }
  }

  args.unshift('--registry=' + registry);
  args.unshift('--disturl=' + distUrl);

  const npmBin = which.sync('npm');
  const ENVS = binaryMirrors.ENVS;
  const env = Object.assign({}, ENVS, process.env);

  const child = execa(npmBin, args, {
    env: env,
    cwd: process.cwd(),
    stdio: 'inherit'
  });

  child.on('exit', code => {
    process.exit(code);
  });

  return child;
};